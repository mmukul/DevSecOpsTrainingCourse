Cross-Site Scripting (XSS) is a common security vulnerability found in web applications. It occurs when an attacker injects malicious scripts into content from otherwise trusted websites. XSS can be categorized into three main types: Stored XSS, Reflected XSS, and DOM-based XSS. Here's an overview:

Types of XSS
Stored XSS:

Description: Also known as persistent XSS, it occurs when malicious script is permanently stored on the target server, such as in a database, a message forum, visitor log, comment field, etc.
Example: An attacker injects a malicious script into a comment field. When a user views the comment, the script executes in the user’s browser.
Impact: Can affect multiple users and potentially all visitors to the affected page.
Reflected XSS:

Description: Also known as non-persistent XSS, it occurs when malicious script is reflected off a web server, such as in an error message, search result, or any other response that includes some or all of the input sent to the server as part of the request.
Example: An attacker sends a victim a link that contains malicious JavaScript. When the victim clicks the link, the script executes in the victim's browser.
Impact: Typically affects individual users who are tricked into clicking on a malicious link.
DOM-based XSS:

Description: A type of XSS where the vulnerability exists in the client-side code rather than the server-side code. It occurs when the application’s client-side scripts write data provided by the user to the Document Object Model (DOM) without proper sanitization.
Example: An attacker manipulates the DOM environment in the victim’s browser to execute malicious JavaScript.
Impact: Can be difficult to detect and mitigate since it occurs entirely on the client side.
XSS Attack Vectors
Injection through User Input: Attackers can inject scripts through any input field that reflects the user’s input back to the browser.
URL Parameters: Malicious scripts can be inserted into URL parameters.
HTTP Headers: HTTP headers such as the Referer or User-Agent can be exploited if not properly sanitized.
Consequences of XSS
Cookie Theft: Attackers can steal cookies to hijack user sessions.
Keylogging: Malicious scripts can capture user inputs, such as passwords or credit card numbers.
Phishing: Attackers can create fake login forms or other deceptive content to trick users.
Malware Distribution: XSS can be used to distribute malware by redirecting users to malicious websites.
Defacement: Attackers can modify the content displayed to users.
Preventing XSS
Input Validation and Sanitization:

Validate and sanitize all user inputs on both client-side and server-side.
Use libraries and frameworks that automatically handle input sanitization.
Output Encoding:

Encode data before rendering it in the browser to ensure that it is treated as data and not executable code.
Use context-specific encoding (e.g., HTML encoding, JavaScript encoding).
Content Security Policy (CSP):

Implement CSP to restrict the sources from which scripts can be loaded and executed.
Helps to mitigate the risk of XSS by whitelisting trusted sources.
HTTPOnly and Secure Cookies:

Use the HTTPOnly flag to prevent JavaScript from accessing cookies.
Use the Secure flag to ensure cookies are only sent over HTTPS.
Security Libraries and Frameworks:

Use well-known security libraries and frameworks that provide built-in protection against XSS.
Keep software and libraries up to date with the latest security patches.
Conclusion
Cross-Site Scripting is a critical security threat that can have severe consequences for web applications and their users. By understanding the different types of XSS and implementing robust security practices, developers can significantly reduce the risk of XSS attacks and protect their applications and users from harm.